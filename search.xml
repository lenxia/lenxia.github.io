<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Ambari构建大数据环境]]></title>
      <url>%2F2017%2F07%2F22%2Fambari-build%2F</url>
      <content type="text"><![CDATA[在大数据方面工作也有两年之久，从了解到了解PLUS也总结了一些笔记、心得，该篇文章详细记录了用apache ambari离线搭建大数据环境。 环境准备本篇搭建采用centos6.5和jdk1.8进行环境的搭建,ambari版本为ambari-2.2.1。 ssh免密码登录 采用greenplum自带管理命令进行ssh免密码配置以及后续的多台服务器管理。 安装文件 免密码 ps:其中all_hosts为所有主机包括自己，seg_hosts为管理的非己主机。 &gt; cat /home/gpadmin/all_hosts host1 host2 host3 # 交换密钥 &gt; gpssh-exkeys -f /home/gpadmin/all_hosts 主机管理 # 主机文件批量管理 &gt; gpssh -f /home/gpadmin/all_hosts # 采用命令行批量管理 &gt; gpssh -h host1 -h host2 -h hosts3 防火墙关闭 selinux关闭 临时关闭 &gt; sudo setenforce 0 # 使用如下命令，得到“Permissive” &gt; getenfoce 永久生效 修改 vim /etc/selinux/config 设为SELINUX=disabled,之后重启所有服务器。 时间同步（将主节点作为时间服务器，其他节点向主节点时间同步） 安装ntp、ntpdate &gt; sudo yum -y ntp ntpdate 修改/etc/ntp.conf # 在restrict default kod nomodify notrap nopeer noquery（表示默认拒绝所有IP的时间同步）之后增加一行。 # restrict 192.168.0.0 mask 255.255.255.0 nomodify notrap # 上面只允许192.168.0.0网段的客户机进行时间同步。 时间同步 &gt;sudo crontab -e # 每隔10分钟同步一下时钟 0-59/10 * * * * /usr/sbin/ntpdate -u 210.72.145.44|logger-tNTP ntp常用服务器： 中国国家授时中心：210.72.145.44 NTP服务器(上海) ：ntp.api.bz 修改/etc/hosts 获取插件 1. yum install yum-plugin-priorities -y # 获取yum-plugin-priorities即可，不需要配置,如需配置参考： vi/etc/yum/pluginconf.d/priorities.conf # 设置为以下内容 [main] enabled=1gpgcheck=0 2. 更新openssl # 查看openssl版本 rpm -qa | grep openssl openssl-1.0.1e-15.el6.x86_64 # 更新openssl sudo yum upgrade openssl # 确认 rpm -qa | grep openssl openssl-1.0.1e-16.el6.x86_64 # 重试ok Ambari安装在线安装参考官网:https://cwiki.apache.org/confluence/display/AMBARI/Install+Ambari+2.2.1+from+Public+Repositories 离线安装元数据(采用mysql对元数据存储)123456789# 创建库以及给予相应权限&gt; create database ambari DEFAULT CHARACTER SET utf8;&gt; grant all privileges on ambari.* to &apos;ambari&apos;@&apos;%&apos; identified by &apos;your_password&apos;;&gt; grant all privileges on ambari.* to &apos;ambari&apos;@&apos;your_hostname&apos; identified by &apos;your_password&apos; WITH GRANT OPTION;&gt; FLUSH PRIVILEGES;# 导入ambari schema&gt; use ambari;&gt; source /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql; 制作ambari repo（本地源）在ambari-server节点安装 httpd,并将这三个资源包解压放在/var/www/html/hdp/目录下。 ambari-2.2.1.0-centos6.tar.gz HDP-2.4.0.0-centos6-rpm.tar.gz HDP-UTILS-1.1.0.20-centos6.tar.gz 123456789101112131415161718192021222324252627282930&gt; sudo yum install httpd -y &amp;&amp; sudo mkdir -p /var/www/html/hdp/# 在所有节点/etc/yum.repos.d/目录创建如下文件，具体内如下:--hdp.repo---[HDP-2.4.0.0]name=HDP Version - HDP-2.4.0.0baseurl=http://[ambari-server]:80/hdp/HDP/centos6/2.x/updates/2.4.0.0gpgcheck=1gpgkey=http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.4.0.0/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1--ambari.repo--[Updates-ambari-2.2.1.0]name=ambari-2.2.1.0 - Updatesbaseurl=http://[ambari-server]:80/hdp/AMBARI-2.2.1.0/centos6/2.2.1.0-161gpgcheck=1gpgkey=http://public-repo-1.hortonworks.com/ambari/centos6/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1--hdp-util.repo--[HDP-UTILS-1.1.0.20]name=HDP Utils Version - HDP-UTILS-1.1.0.20baseurl=http://[ambari-server]:80/hdp/HDP-UTILS-1.1.0.20/repos/centos6gpgcheck=1gpgkey=http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.3.0.0/RPM-GPG-KEY/RPM-GPG-KEY-Jenkinsenabled=1priority=1 ####开始安装 12345678910111213141、在ambari-server执行：sudo yum install ambari-server -y2、ambari设置(元数据的设置) &gt; sudo ambari-server setup &gt; sudo ambari-server setup --jdbc-db=mysql --jdbc-driver=/usr/share/java/mysql-connector-java-5.1.38-bin.jar mysql如果报错 java.lang.ClassNotFoundException: com.mysql.jdbc.Driver, 需要查看如下几个目录, 确保 JDBC 在这几个目录下面: ● /usr/share/java/ ● /var/lib/ambari-server/resources ● /usr/lib/ambari-server 3、在amabri-server主机上启动ambari &gt; sudo service ambari-server start 4、浏览器访问ambari-server http://&lt;ambari-server-host&gt;:8080. 5、接下来就可以安装hadoop生态圈各组件了，这里就不赘述了。 PSambari软件下载地址: ● [Ambari] http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.1.1/bk_Installing_HDP_AMB/content/_ambari_repositories.html ● [HDP] http://docs.hortonworks.com/HDPDocuments/Ambari-2.2.1.1/bk_Installing_HDP_AMB/content/_hdp_23_repositories.html ambari文件目录： ● resource目录:/var/lib/ambari-server/,/var/lib/ambari-agent/ ● 日志目录:/var/log/ambari-server/,/var/log/ambari-agent/ ● 配置目录: /etc/ambari-server/conf/ambari.properties hadoop栈文件目录: ● resource目录:/usr/hdp/** ● 日志目录:/var/log/hdfs/(以hdfs为例) ● 配置目录:/etc/** 总结问题安装 Install, Start and Test 过程中No module named rpm. 解决：到centos 镜像网站：http://mirrors.163.com/centos/6/os/x86_64/Packages/找到以下包重装 &gt; sudo rpm -ivh *.rpm -------------------------安装包---------------------- python-2.6.6-36.el6.x86_64.rpm python-urlgrabber-3.9.1-8.el6.noarch.rpm python-devel-2.6.6-36.el6.x86_64.rpm python-libs-2.6.6-36.el6.x86_64.rpm yum-3.2.29-40.el6.centos.noarch.rpm 使用1、在使用过程中，提供了webui的方式对集群很方便的管理，将hadoop每个组件作为服务对集群进行管理。 2、和ambari对应的还有CDH进行集群得统一管理,CDH有商业版本和免费使用版本。 3、大部分公司使用的还是CDH进行搭建，不仅仅是版本统一之类的（个人理解,诸如对yarn调度器的管理,实现了对yarn动态资源池的管理），因为CDH有商业在后面支持，社区很活跃，遇到的问题大部分都能解决。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F15%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[数据仓库之维度建模简谈]]></title>
      <url>%2F2017%2F02%2F15%2Fdata-model%2F</url>
      <content type="text"><![CDATA[简单记录下数据仓库之维度建模。 写在前面 基本概念事实表在多维数据仓库中，保存度量值的详细值或事实的表称为“事实表”；一般用来存储历史数据（如销售额、利润等）；事实数据表不应该包含描述性的信息。如下面销售数据事实表。 时间维ID 地域维ID 销售额 20150101 J0001 $3000 20150215 C1011 $1500 20161212 D1100 $5000 总结：事实表主要是用来存储事实的度量值和各个维的码值（即维度表的主键ID） 维度表维度表是用来存储维度属性，是观察问题的不同角度。如下地区维表 地域维ID 国家 省份 城市 J0001 CHINA 广东省 广州市 C1011 CHINA 山东省 济南市 D1100 CHINA 山西省 太原市 案例下面以维度建模中常用的星星模型举个栗子：假如某业务部门想要统计过去几年的销售情况，就可以像如下进行数据建模。 ps:图片摘自网络。 接下来 四步法(Kimball理论)Step1:确定业务过程该过程主要对关键的业务逻辑以及规则进行处理，通常是选择多个业务过程对主题合理的划分。 以淘宝购物举个例子： 业务过程通常用行为动词表示，表示业务执行的活动，比如上面的黄色棱形框。一旦业务过程确定之后，事实表的基本构建已经明确。 Step2:确定事实粒度（声明粒度）粒度的声明确定了事实表每一行代表什么业务，一般以最小粒度进行事实表的构建，这样做是方便向下钻取 Tips: 粒度：定义为“如何描述事实表的单个行?”；以上面淘宝购物为例，对于订单这个过程，就可以选择订单这个粒度。不同的业务场景有不同的粒度，比如产品粒度，时间粒度等等 钻取：olap概念，后续细说。。。 Step3:确定维度完成了粒度的声明，也就意味着维主键已经确认，对应的维度字段就可以确认了。比如上面淘宝购物栗子，相关的维度信息：买家维度、卖家维度、商品维度、时间维度。 Step4:确定事实事实可以通过回答“过程的度量是什么”来确定。应该选择与业务过程有关所有事实，且事实的粒度要与所声明的事实表粒度一致。事实有可加性、半可加性、非可加性事实，需要将不可加事实分解为可加的组件。 在淘宝购物的订单付款事务事实表中，同粒度的事实有子订单分摊的支付金额、邮费、优惠金额等。 写在最后 以上为构建数仓常用的一些理论知识，后续会不断完善和提高。。。 参考： https://yq.aliyun.com/articles/110992 http://itindex.net/detail/52754-%E7%BB%B4%E5%BA%A6-%E6%A6%82%E5%BF%B5]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Markdown 语法总结]]></title>
      <url>%2F2017%2F02%2F15%2Fmarkdown-summary%2F</url>
      <content type="text"><![CDATA[虽说又忙碌了一年，但是总觉得应该留下点什么，刚好前几天在用markdown写文章的时候遇到的坎坎坷坷。所以特地写了一遍关于markdown的一些语法，为以后写文章垫个路。希望可以帮到有需要的人，文章会不定期更新。好了，废话补多少，开始放大招😄😄😄 Markdown简介摘自百度百科Markdown 是一种轻量级标记语言，创始人为约翰·格鲁伯（John Gruber）。它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。 简单来说，就是抛弃平常苦逼程序员为了HTML的DIV+CSS焦头烂额的时候[主要用于写文章]，可以通过markdown易于编写的特点轻松的写文章或者博客等,当然了markdown也是兼容HTML的。 Markdown 语法演示ps: 这里主要是一些常用的语法 文章标题先看下效果图。 大体来说，用‘#’字符的个数代替html的元素h1、h2…..。这里显示四级标题,markdown可以支持到6级标题。 列表Markdown 支持有序列表和无序列表。 无序列表可以使用’*’,’+’,’-‘作为前缀，如下： 有序列表则使用数字接着一个英文句点[注：英文点之后需要加一空格]： hadoop spark scala python 区块引用类似于邮件里的引言。 语法：每一行行首加上’&gt;’符号即可，效果如下： 数据仓库，英文名称为Data Warehouse，可简写为DW或DWH。数据仓库，是为企业所有级别的决策制定过程，提供所有类型数据支持的战略集合。 它是单个数据存储，出于分析性报告和决策支持目的而创建。 为需要业务智能的企业，提供指导业务流程改进、监视时间、成本、质量以及控制。 tips: 换行只需在一空行前加上’&gt;’,然后回车即可。 代码块攻城狮在写笔记或者其他记录自己的核心代码的时候,我们可以使用这种语法突出我们的核心代码,这个时候我们可以使用(`)将我们的代码包起来,如下面的Scala代码： 例子： 12345678910111213141516171819class ThreadDemo(threadName: String, fileName: String) extends Runnable &#123; override def run(): Unit = &#123; val writer = new PrintWriter(new File("test" + fileName)) val dataSource: String = "hadoop java spark shell" val words = dataSource.split(" ") for(i &lt;- 0 to words.length)&#123; writer.write(words(Random.nextInt(words.length))+" ") writer.flush() &#125; writer.close() println(threadName+" 写入数据成功....") Thread.sleep(5000) &#125;&#125;&#125; 表格效果： 商家ID 商家名称 活动 100000 水果摊 便宜卖 123456 海鲜楼 无 341554 大润发 全场8折 具体语法： 12345| 商家ID | 商家名称 | 活动 || ------------- |:-------------:| -----:|| 100000 | 水果摊 | 便宜卖 || 123456 | 海鲜楼 | 无 || 341554 | 大润发 | 全场8折| 未完待续….参考文档：Makrdown 语法中文文档]]></content>
    </entry>

    
  
  
</search>
